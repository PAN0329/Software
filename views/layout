<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">  <!--> 設定網頁顯示比例，對於行動裝置來說是必要的 <-->
    <title> {{title}} </title>                                              <!--> 網頁標題 <-->
    <script src="/htmx.min.js"></script>                                    <!--> HTMX JavaScript 函式庫 <-->
    <script src="/response-targets.js"></script>                            <!--> response-targets.js HTMX 擴充庫 <-->
    <link rel="stylesheet" href="/bootstrap.min.css">                       <!--> Bootstrap CSS 樣式庫 <-->
    <link rel="stylesheet" href="/bootstrap-icons.min.css">                 <!--> Bootstrap Icons 圖示庫 <-->
    <script src="/bootstrap.min.js"></script>                               <!--> Bootstrap JavaScript 函式庫 <-->
                                                                            <!--> Bootstrap-icons.woff2 網頁圖示字型檔案 <-->
</head>

<body class="container">                                                    <!--> 網頁內容，class="container" 是 Bootstrap 提供的基本建構塊 <-->
    <header class="text-center">                                            <!--> 網頁標題，class="text-center" 是 Bootstrap 提供的文字置中 <-->
        <h1>My McDonald e-Management System</h1>
    </header>
    {{> navbar}}                                                            <!--> 一個navbar（導覽列），連結到系統的各種功能。點擊某個功能，main#main 顯示該功能的使用者介面。 <-->
    <div id="toast"></div>                                                  <!--> 用於顯示來自後端資訊的區塊 <-->
    <!-->
        // {{#where}} ... {{/where}} 是一個模板區塊，只有在 where 變數有值時才會在 HTML 顯示。
        // hx-get 屬性告訴 HTMX 向「where」URL 發出 HTTP GET 請求，並且該請求將在觸發時發出。
        // hx-trigger 屬性用於確定如何觸發請求，這裡我們將其設定為「load」事件，即元素何時「載入」到瀏覽器中。
        // 當我們重新載入頁面時，它將由我們的第二個路由 app.get('/*', ... ) 處理。
        // 在該路由中，if首先檢查請求是否是HTMX發出的，如果是，則呼叫next()由後面的路由或路由器處理。
        // 否則，將透過渲染 layout.js 並將 where 參數設定為請求的 URL 來發送響應。
        // 當查詢產生錯誤時，它會執行 console.log 和「res.status(404).send(err.sqlMessage)」。
        //
        // 我們在 main 標籤中插入了兩個新屬性，
        // hx-ext="response-targets" 用於告訴 HTMX 使用 response-targets.js 擴展庫，
        // hx-target-error="#toast" 用於告訴 HTMX 將錯誤訊息放入 id="toast" 的區塊中。
    <-->
    <main id="main" hx-ext="response-targets" hx-target-error="#toast" {{#where}} hx-trigger="load" hx-get="{{where}}" {{/where}}>
        {{flash}}
        <div class="text-center">                                           <!--> 一個 Bootstrap 圖示，圖示的大小由 font-size 控制，50vh 表示其高度為視窗高度的 50% <-->
            <i class="bi bi-truck" style="font-size: 50vh;"></i>
        </div>
    </main>
    <footer class="text-center">
        <p>&copy; 2024 My McDonald e-Management</p>
    </footer>
    <script>
        // 監聽 toast 區塊的 htmx:afterSwap 事件，當錯誤訊息顯示在 div#toast 中時：
        // 1. 瀏覽器會滾動到頂部以便可以看到錯誤訊息。
        // 2. 瀏覽器會在 10 秒後將其淡出。
        document.querySelector('#toast').addEventListener('htmx:afterSwap', function (event) {
            const elem = this;
            elem.style.opacity = 1.0;
            setTimeout(function () {
                elem.style.opacity = 0.0;
                elem.style.transition = 'opacity 1s ease-out';
            }, 10000);
            elem.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'nearest' });
        });
    </script>
</body>

</html>